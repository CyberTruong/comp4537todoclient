{"version":3,"sources":["src/services/ApiService.js","src/components/Task.js","src/components/List.js","src/components/Lists.js","src/views/ROUTES.js","src/views/HomeView.js","src/views/ListView.js","src/views/TaskView.js","src/views/AuthView.js","App.js"],"names":["APIService","username","password","fetch","this","APIEndPoints","AUTH","method","METHODS","POST","mode","headers","body","JSON","stringify","response","ok","json","token","Error","status","LISTS","parse","LIST","list","id","PUT","getProperties","DELETE","TASKS","TASK","task","APIRoot","GET","Task","taskData","list_id","name","BehaviorSubject","description","getValue","a","async","updateTask","List","listData","tasks","taskID","result","filter","updateList","next","getTasks","tasksData","map","createTask","deleteTask","Lists","lists","listID","getLists","listsData","createList","deleteList","instance","HomeView","navigation","useNavigation","React","useState","setLists","setStatus","extraData","setExtraData","useEffect","listsSubscription","subscribe","addListener","unsubscribe","error","message","View","FlatList","data","keyExtractor","item","toString","renderItem","onPress","navigate","ROUTES","listItemOnPress","Content","Title","Subtitle","Button","title","Text","h5","ListView","route","getListByID","params","setTasks","setName","listNameSubscription","tasksSubscription","style","flexDirection","alignItems","containerStyle","flex","label","value","onChangeText","text","rightIcon","h4","TaskView","getTaskByID","setDescription","nameSubscription","descriptionSubscription","type","goBack","setUsername","setPassword","authenticate","submit","Stack","createStackNavigator","StyleSheet","create","container","App","NavigationContainer","Navigator","initialRouteName","Screen","component","AuthView","options"],"mappings":"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","file":"static/js/app.c2cf3516.chunk.js","sourcesContent":["/**\n * Handles API calls.\n */\nexport default class APIService {\n    static APIRoot = \"https://ktruong.net:3002/API/v1\";\n\n    static token = null;\n\n    static APIEndPoints = {\n        AUTH: this.APIRoot + `/auth`,\n        LISTS: this.APIRoot + `/lists`,\n        LIST: this.APIRoot + `/list`,\n        TASKS: this.APIRoot + `/tasks`,\n        TASK: this.APIRoot + `/task`,\n    };\n\n    static METHODS = {\n        GET: \"GET\",\n        PUT: \"PUT\",\n        POST: \"POST\",\n        DELETE: \"DELETE\",\n    };\n\n    static async authenticate(username, password) {\n        try {\n            const response = await fetch(this.APIEndPoints.AUTH, {\n                method: this.METHODS.POST,\n                mode: \"cors\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    username: username,\n                    password: password,\n                }),\n            });\n            if (response.ok) {\n                const token = await response.json();\n                this.token = token;\n                return token;\n            }\n            throw new Error(response.status);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Gets all lists in the database.\n     */\n    static async getLists() {\n        const response = await fetch(this.APIEndPoints.LISTS, {\n            method: this.METHODS.POST,\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                token: this.token,\n            }),\n        });\n        if (response.ok) return JSON.parse(await response.json());\n        throw new Error(response.status);\n    }\n\n    /**\n     * Creates a new list in the database.\n     */\n    static async createList() {\n        const response = await fetch(this.APIEndPoints.LIST, {\n            method: this.METHODS.POST,\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                token: this.token,\n            }),\n        });\n\n        if (!response.ok) throw new Error(response.status);\n    }\n\n    /**\n     * Updates a list.\n     * @param {List} list List object that holds the new updates.\n     */\n    static async updateList(list) {\n        const response = await fetch(this.APIEndPoints.LIST + `/${list.id}`, {\n            method: this.METHODS.PUT,\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                token: this.token,\n                ...list.getProperties(),\n            }),\n        });\n\n        if (!response.ok) throw new Error(response.status);\n    }\n\n    /**\n     * Deletes a list.\n     * @param {List} list List object that holds the id needed to delete the list.\n     */\n    static async deleteList(list) {\n        const response = await fetch(this.APIEndPoints.LIST + `/${list.id}`, {\n            method: this.METHODS.DELETE,\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                token: this.token,\n            }),\n        });\n\n        if (!response.ok) throw new Error(response.status);\n    }\n\n    /**\n     * Gets all tasks based on the list.\n     * @param {List} list List object that holds the id needed to fetch tasks.\n     */\n    static async getTasks(list) {\n        const response = await fetch(this.APIEndPoints.TASKS + `/${list.id}`, {\n            method: this.METHODS.POST,\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                token: this.token,\n            }),\n        });\n\n        const body = await response.json();\n\n        if (response.ok) return body;\n        throw new Error(response.status);\n    }\n\n    /**\n     * Creates an empty new task in the specified list.\n     * @param {List} list\n     */\n    static async createTask(list) {\n        const response = await fetch(this.APIEndPoints.TASK + `/${list.id}`, {\n            method: this.METHODS.POST,\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                token: this.token,\n            }),\n        });\n\n        if (!response.ok) throw new Error(response.status);\n    }\n\n    /**\n     * Updates specified task.\n     * @param {Task} task The task instance to be updated\n     */\n    static async updateTask(task) {\n        const response = await fetch(this.APIEndPoints.TASK + `/${task.id}`, {\n            method: this.METHODS.PUT,\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                token: this.token,\n                ...task.getProperties(),\n            }),\n        });\n\n        if (!response.ok) throw new Error(response.status);\n    }\n\n    /**\n     * Deletes the specified task.\n     * @param {Task} task\n     */\n    static async deleteTask(task) {\n        const response = await fetch(this.APIEndPoints.TASK + `/${task.id}`, {\n            method: this.METHODS.DELETE,\n            mode: \"cors\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                token: this.token,\n            }),\n        });\n\n        if (!response.ok) throw new Error(response.status);\n    }\n}\n","import { BehaviorSubject } from \"rxjs\";\nimport APIService from \"../services/ApiService\";\n\n/**\n * Represents a task instance.\n */\nexport default class Task {\n    /**\n     *\n     * @param {Object} taskData a row in the database that represents a task.\n     */\n    constructor(taskData) {\n        this.id = taskData.id;\n        this.list_id = taskData.list_id;\n        this.name = new BehaviorSubject(\n            taskData.name ? taskData.name : \"Enter Task Name\"\n        );\n        this.description = new BehaviorSubject(\n            taskData.description ? taskData.description : \" \"\n        );\n    }\n\n    getProperties() {\n        return {\n            id: this.id,\n            list_id: this.list_id,\n            name: this.name.getValue(),\n            description: this.description.getValue(),\n        };\n    }\n\n    async updateTask(task) {\n        await APIService.updateTask(task);\n    }\n}\n","import { BehaviorSubject } from \"rxjs\";\nimport Task from \"./Task\";\nimport APIService from \"../services/ApiService\";\n\n/**\n * Represents a list that holds tasks.\n */\nexport default class List {\n    /**\n     * @param {Object} listData a row in the database that represents a list.\n     */\n    constructor(listData) {\n        this.id = listData.id;\n        this.name = new BehaviorSubject(\n            listData.name ? listData.name : \"New List\"\n        );\n        this.tasks = new BehaviorSubject([]);\n    }\n\n    getTaskByID(taskID) {\n        const result = this.tasks\n            .getValue()\n            .filter((task) => task.id == taskID);\n        if (result) return result[0];\n    }\n\n    getProperties() {\n        return {\n            id: this.id,\n            name: this.name.getValue(),\n        };\n    }\n\n    async updateList() {\n        await APIService.updateList(this);\n    }\n\n    async getTasks() {\n        this.tasks.next([]);\n        const tasksData = await APIService.getTasks(this);\n        if (tasksData) this.tasks.next(tasksData.map((task) => new Task(task)));\n    }\n\n    async createTask() {\n        await APIService.createTask(this);\n        this.getTasks();\n    }\n\n    async deleteTask(task) {\n        await APIService.deleteTask(task);\n        this.getTasks();\n    }\n}\n","import { BehaviorSubject } from \"rxjs\";\nimport List from \"./List\";\nimport APIService from \"../services/ApiService\";\n\n/**\n * Singleton instance component for the Home View.\n */\nclass Lists {\n    static instance = new Lists();\n\n    constructor() {\n        this.lists = new BehaviorSubject([]);\n    }\n\n    getListByID(listID) {\n        const result = this.lists\n            .getValue()\n            .filter((list) => list.id == listID);\n        if (result) return result[0];\n    }\n\n    async getLists() {\n        this.lists.next([]);\n        const listsData = await APIService.getLists();\n        if (listsData) {\n            this.lists.next(listsData.map((list) => new List(list)));\n        }\n    }\n\n    async createList() {\n        await APIService.createList();\n        this.getLists();\n    }\n\n    async deleteList(list) {\n        await APIService.deleteList(list);\n        this.getLists();\n    }\n}\n\nexport default Lists.instance;\n","export default {\n    AUTH: \"Auth\",\n    HOME: \"Home\",\n    LIST: \"List\",\n    TASK: \"Task\",\n};\n","import React from \"react\";\nimport { FlatList, Button, Text } from \"react-native\";\nimport { ListItem } from \"react-native-elements\";\nimport Lists from \"../components/Lists\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport ROUTES from \"./ROUTES\";\nimport { View } from \"react-native\";\n\nexport default function HomeView() {\n    const navigation = useNavigation();\n\n    const [lists, setLists] = React.useState(Lists.lists.getValue());\n    const [status, setStatus] = React.useState(\"\");\n    const [extraData, setExtraData] = React.useState(null);\n\n    React.useEffect(() => {\n        const listsSubscription = Lists.lists.subscribe((lists) => {\n            setLists(lists);\n        });\n\n        navigation.addListener(\"focus\", () => {\n            setExtraData(null);\n        });\n\n        return () => {\n            listsSubscription.unsubscribe();\n        };\n    }, []);\n\n    React.useEffect(() => {\n        try {\n            Lists.getLists();\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }, []);\n\n    async function createList() {\n        try {\n            await Lists.createList();\n            setStatus(\"Success!\");\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }\n\n    function listItemOnPress(item) {\n        setExtraData(item);\n        navigation.navigate(ROUTES.LIST, {\n            listID: item.id,\n        });\n    }\n\n    return (\n        <View>\n\n            <FlatList\n                extraData={extraData}\n                data={lists}\n                keyExtractor={(item) => item.id.toString()}\n                renderItem={({ item }) => (\n                    <ListItem onPress={() => listItemOnPress(item)}>\n                        <ListItem.Content>\n                            <ListItem.Title>\n                                {item.name.getValue()}\n                            </ListItem.Title>\n                            <ListItem.Subtitle>\n                                List ID: {item.id}\n                            </ListItem.Subtitle>\n                        </ListItem.Content>\n                    </ListItem>\n                )}\n            />\n            <Button title=\"NEW LIST\" onPress={() => createList()} />\n            <Text h5>STATUS: {status}</Text>\n        </View>\n    );\n}\n","import React from \"react\";\nimport { FlatList } from \"react-native\";\nimport { Button, Icon, ListItem, Text } from \"react-native-elements\";\nimport ROUTES from \"./ROUTES\";\nimport { View } from \"react-native\";\nimport { Input } from \"react-native-elements\";\nimport Lists from \"../components/Lists\";\n\nexport default function ListView({ route, navigation }) {\n    const list = Lists.getListByID(route.params.listID);\n    const [tasks, setTasks] = React.useState([]);\n    const [name, setName] = React.useState(list.name.getValue());\n    const [status, setStatus] = React.useState(\"\");\n    const [extraData, setExtraData] = React.useState(null);\n\n    React.useEffect(() => {\n        const listNameSubscription = list.name.subscribe((name) =>\n            setName(name)\n        );\n        const tasksSubscription = list.tasks.subscribe((tasks) =>\n            setTasks(tasks)\n        );\n\n        navigation.addListener(\"focus\", () => {\n            setExtraData(null);\n        });\n\n        return () => {\n            tasksSubscription.unsubscribe();\n            listNameSubscription.unsubscribe();\n        };\n    }, []);\n\n    React.useEffect(() => {\n        try {\n            list.getTasks();\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }, []);\n\n    async function updateList() {\n        try {\n            await list.updateList();\n            setStatus(\"Success!\");\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }\n\n    async function deleteList() {\n        try {\n            await Lists.deleteList(list);\n            navigation.navigate(ROUTES.HOME);\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }\n\n    function listItemOnPress(item) {\n        setExtraData(item);\n        navigation.navigate(ROUTES.TASK, {\n            id: item.id,\n            list_id: item.list_id,\n        });\n    }\n\n    async function createTask() {\n        try {\n            list.createTask();\n            setStatus(\"Success!\");\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }\n\n    return (\n        <View>\n            <View\n                style={{\n                    flexDirection: \"row\",\n                    alignItems: \"center\",\n                }}\n            >\n                <Input\n                    containerStyle={{ flex: 1 }}\n                    label={\"List Name\"}\n                    value={name}\n                    onChangeText={(text) => list.name.next(text)}\n                    rightIcon={\n                        <Icon\n                            name=\"type\"\n                            name=\"send\"\n                            onPress={() => updateList()}\n                        />\n                    }\n                />\n                <Button title={\"DELETE LIST\"} onPress={() => deleteList()} />\n            </View>\n\n            <FlatList\n                extraData={extraData}\n                data={tasks}\n                keyExtractor={(item) => item.id.toString()}\n                renderItem={({ item }) => (\n                    <ListItem onPress={() => listItemOnPress(item)}>\n                        <ListItem.Content>\n                            <ListItem.Title>\n                                {item.name.getValue()}\n                            </ListItem.Title>\n                            <ListItem.Subtitle>\n                                List ID: {item.list_id} Task ID: {item.id}\n                            </ListItem.Subtitle>\n                        </ListItem.Content>\n                    </ListItem>\n                )}\n            />\n            <Button title=\"NEW TASK\" onPress={() => createTask()} />\n            <Text h4>STATUS: {status}</Text>\n        </View>\n    );\n}\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport Lists from \"../components/Lists\";\nimport { Text, Input, Button } from \"react-native-elements\";\n\nexport default function TaskView({ route, navigation }) {\n    const list = Lists.getListByID(route.params.list_id);\n    const task = list.getTaskByID(route.params.id);\n\n    const [name, setName] = React.useState(task.name.getValue());\n    const [description, setDescription] = React.useState(\n        task.description.getValue()\n    );\n    const [status, setStatus] = React.useState(\"\");\n\n    React.useEffect(() => {\n        const nameSubscription = task.name.subscribe((name) => setName(name));\n        const descriptionSubscription = task.description.subscribe(\n            (description) => setDescription(description)\n        );\n\n        return () => {\n            nameSubscription.unsubscribe();\n            descriptionSubscription.unsubscribe();\n        };\n    }, []);\n\n    async function updateTask(task) {\n        try {\n            await task.updateTask(task);\n            setStatus(\"Success!\");\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }\n\n    async function deleteTask(task) {\n        try {\n            await list.deleteTask(task);\n            navigation.goBack();\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }\n\n    return (\n        <View>\n            <Text>Task ID: {task.id}</Text>\n            <Text>List ID: {task.list_id}</Text>\n            <Input\n                label={\"Name\"}\n                value={name}\n                onChangeText={(text) => task.name.next(text)}\n            />\n            <Input\n                containerStyle={{ flex: 1 }}\n                label={\"Description\"}\n                value={description}\n                onChangeText={(text) => task.description.next(text)}\n            />\n            <Button title={\"UPDATE TASK\"} onPress={() => updateTask(task)} />\n            <Button\n                type={\"outline\"}\n                title={\"DELETE TASK\"}\n                onPress={() => deleteTask(task)}\n            />\n            <Text h4>STATUS: {status}</Text>\n        </View>\n    );\n}\n","import React from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport ROUTES from \"./ROUTES\";\nimport { View } from \"react-native\";\nimport { Button, Text } from \"react-native-elements\";\nimport APIService from \"../services/ApiService\";\nimport { Input } from \"react-native-elements\";\n\nexport default function HomeView() {\n    const navigation = useNavigation();\n    const [username, setUsername] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [status, setStatus] = React.useState(\"\");\n\n    async function submit(username, password) {\n        try {\n            const response = await APIService.authenticate(username, password);\n            setStatus(response);\n            navigation.navigate(ROUTES.HOME);\n        } catch (error) {\n            setStatus(error.message);\n        }\n    }\n\n    return (\n        <View>\n            <Input\n                containerStyle={{ flex: 1 }}\n                label={\"USERNAME\"}\n                value={username}\n                onChangeText={(value) => setUsername(value)}\n            />\n            <Input\n                containerStyle={{ flex: 1 }}\n                label={\"PASSWORD\"}\n                value={password}\n                onChangeText={(value) => setPassword(value)}\n            />\n            <Button title=\"SUBMIT\" onPress={() => submit(username, password)} />\n            <Text h5>STATUS: {status}</Text>\n        </View>\n    );\n}\n","import React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport HomeView from \"./src/views/HomeView\";\nimport ListView from \"./src/views/ListView\";\nimport TaskView from \"./src/views/TaskView\";\nimport AuthView from \"./src/views/AuthView\";\nimport ROUTES from \"./src/views/ROUTES\";\n\nconst Stack = createStackNavigator();\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n});\n\nexport default function App() {\n    return (\n        <NavigationContainer>\n            <Stack.Navigator initialRouteName={ROUTES.AUTH}>\n                <Stack.Screen\n                    name={ROUTES.AUTH}\n                    component={AuthView}\n                    options={{ title: \"Login\" }}\n                />\n                <Stack.Screen\n                    name={ROUTES.HOME}\n                    component={HomeView}\n                    options={{ title: \"To Do Lists\" }}\n                />\n                <Stack.Screen\n                    name={ROUTES.LIST}\n                    component={ListView}\n                    options={{ title: \"Tasks\" }}\n                />\n                <Stack.Screen\n                    name={ROUTES.TASK}\n                    component={TaskView}\n                    options={{ title: \"Task Details\" }}\n                />\n            </Stack.Navigator>\n        </NavigationContainer>\n    );\n}\n"],"sourceRoot":""}